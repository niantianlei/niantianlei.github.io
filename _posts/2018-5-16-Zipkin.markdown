---
layout:     post
title:      "分布式追踪系统Zipkin"
subtitle:   " \"distributed tracking system\""

author:     "Nian Tianlei"
header-img: "img/post-bg-2016.jpg"
header-mask: 0.4
catalog:    true
tags:
    - 分布式
---


参考地址：[https://zipkin.io/pages/quickstart.html](https://zipkin.io/pages/quickstart.html)    

#### Zipkin的产生    
随着业务的迅速发展，系统也进行相应的拆分，特别是随着微服务架构和容器技术的兴起，一个应用，后台可能几百个服务在支撑；一个前端请求也可能需要很多次服务调用才能完成；问题就出现了：当请求变慢甚至不可用时，就无法得知究竟是哪个后台服务引起的。Zipkin分布式跟踪系统就可以实现快速定位服务故障点。

#### Zipkin的作用  
Zipkin分布式跟踪系统；它可以帮助收集时间数据，解决在microservice架构下的延迟问题；它管理这些数据的收集和查找；Zipkin的设计是基于谷歌的[Google Dapper论文](https://ai.google/research/pubs/pub36356)（[对应的中文版](http://bigbully.github.io/Dapper-translation/)）。
每个应用程序向Zipkin报告定时数据，Zipkin UI呈现了一个依赖图表来展示多少跟踪请求经过了每个应用程序；如果想解决延迟问题，可以过滤或者排序所有的跟踪请求，并且可以查看每个跟踪请求占总跟踪时间的百分比。


#### Zipkin的安装  
下载jar包  
`https://search.maven.org/remote_content?g=io.zipkin.java&a=zipkin-server&v=LATEST&c=exec`  
运行jar包，为简单可更改jar包名  
通过`java –jar zipkin.jar`执行  
在CentOS等机器上可以通过`wget`命令来下载。  
![1]({{ "/img/post/Zipkin/zipkin-1.png" | prepend: site.baseurl }} )  
过程中会出现这样的图案  
![2]({{ "/img/post/Zipkin/zipkin-2.png" | prepend: site.baseurl }} )  
到此执行完毕   
此时，可在本机打开网址http://127.0.0.1:9411/zipkin/，查看traces  
![3]({{ "/img/post/Zipkin/zipkin-3.png" | prepend: site.baseurl }} )  

#### Zipkin架构
跟踪器(Tracer)位于应用程序中，并记录发生的操作的时间和元数据，提供了相应的类库，对用户的使用来说是透明的，收集的跟踪数据称为Span；  
将数据发送到Zipkin的仪器化应用程序中的组件称为Reporter，Reporter通过某种传输方式将追踪数据发送至Zipkin收集器(collector)，
然后将跟踪数据进行存储(storage)，由API查询存储以向UI提供数据。
架构图如下：  
![4]({{ "/img/post/Zipkin/zipkin-4.png" | prepend: site.baseurl }} )  
1.Trace  
Zipkin使用Trace结构表示对一次请求的跟踪，一次请求可能由后台的若干服务负责处理，每个服务的处理是一个Span，Span之间有依赖关系，Trace可看作是树结构的Span集合；  

2.Span  
每个服务的处理跟踪是一个Span，可以理解为一个基本的工作单元，包含了一些描述信息：id，parentId，name，timestamp，duration，annotations等  
例如：  
```
{
      "traceId": "bd7a977555f6b982",
      "name": "get-traces",
      "id": "ebf33e1a81dc6f71",
      "parentId": "bd7a977555f6b982",
      "timestamp": 1458702548478000,
      "duration": 354374,
      "annotations": [
        {
          "endpoint": {
            "serviceName": "zipkin-query",
            "ipv4": "192.168.1.2",
            "port": 9411
          },
          "timestamp": 1458702548786000,
          "value": "cs"
        }
      ],
      "binaryAnnotations": [
        {
          "key": "lc",
          "value": "JDBCSpanStore",
          "endpoint": {
            "serviceName": "zipkin-query",
            "ipv4": "192.168.1.2",
            "port": 9411
          }
        }
      ]
}
```
**traceId：**标记一次请求的跟踪，相关的Spans都有相同的traceId。64位或128位，全局唯一；  
**id：**span id，64位，tranceId内唯一；  
**name：**span的名称，一般是接口方法的名称；  
**service Name：**服务名；  
**parentId：**可选的id，当前Span的父Span id，通过parentId来保证Span之间的依赖关系，如果没有parentId，表示当前Span为根Span；  
**timestamp：**Span创建时的时间戳，使用的单位是微秒，所有时间戳都有错误，包括主机之间的时钟偏差以及时间服务重新设置时钟的可能性，
出于这个原因，Span应尽可能记录其duration；  
**duration：**开始span到结束span的时间，单位微秒；  
**annotations：**注释用于及时记录事件；有一组核心注释用于定义RPC请求的开始和结束，例如客户端发送(cs)，客户端接收(cr)，服务端接收(sr)，服务端发送(ss)等；  
**binaryAnnotations：**二进制注释，旨在提供有关RPC的额外信息；  
**tags：**记录附加数据。  

一个Span就是记录[remoteEndpoint.serviceName]服务的[Span.name]方法的执行过程，其中的annotation记录了中间的一些事件发生时间，通过这些时间可以得到[Span.name]方法的网络传输时间，服务端执行时间，客户端响应时间等信息，从而对其进行诊断优化。多个Span通过parentId构成一个树形结构，根Span的parentId为空，描述了一次trace（tranceId标识）中多个服务之间的调用过程。  

3.Transport  
收集的Spans必须从被追踪的服务运输到Zipkin collector，有三个主要的传输方式：HTTP, Kafka和Scribe；    

4.Components  
有4个组件组成Zipkin：collector，storage，search，web UI  
**collector：**一旦跟踪数据到达Zipkin collector守护进程，它将被验证，存储和索引，以供Zipkin收集器查找；
**storage：**Zipkin最初数据存储在Cassandra上，因为Cassandra是可扩展的，具有灵活的模式，并在Twitter中大量使用；但是这个组件可插入，除了Cassandra之外，还支持ElasticSearch和MySQL；  
**search：**一旦数据被存储和索引，我们需要一种方法来提取它。查询守护进程提供了一个简单的JSON API来查找和检索跟踪，主要给Web UI使用；  
**web UI：**创建了一个GUI，为查看痕迹提供了一个很好的界面；Web UI提供了一种基于服务，时间和注释查看跟踪的方法。  


#### 关键问题：  
重要数据：包括tracerid、spanid的生成，延迟时间的计算，事件记录，tag记录等  
采样：减少跟踪导致的系统负荷  
服务之间跟踪信息的传递，称为植入。植入的信息包括：Trace Id、Span Id、Parent Id、Sampled、Flags  
 


#### Demo  
另外因为本人对Java比较熟悉所以根据brave写了个demo，演示一下trace运行，查看服务的调用过程。  
整个的界面是这样的：  
![5]({{ "/img/post/Zipkin/zipkin-5.png" | prepend: site.baseurl }} )  
我这里建了两个工程，提供两个接口，调用第一个接口，该接口内部会调用第二个接口，所以深度为2。  
点开一个请求可以看到如图：  
![6]({{ "/img/post/Zipkin/zipkin-6.png" | prepend: site.baseurl }} )  
可以看到持续时间信息，请求所含的节点，深度及span总数  
点开service查看详情  
![7]({{ "/img/post/Zipkin/zipkin-7.png" | prepend: site.baseurl }} )  
可以看到traceId，spanId，parentId等信息，我这里查看的是头节点所以没有parentId。

 
 